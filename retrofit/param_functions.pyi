from typing import Any, Callable, Optional, TypeVar, overload

T = TypeVar("T")

@overload
def Header(alias: Optional[str] = None, *, required: bool = False) -> Any: ...
@overload
def Header(alias: Optional[str] = None, *, default: T, required: bool = False) -> T: ...
@overload
def Query(alias: Optional[str] = None, *, required: bool = False) -> Any: ...
@overload
def Query(alias: Optional[str] = None, *, default: T, required: bool = False) -> T: ...
@overload
def Path(alias: Optional[str] = None, *, required: bool = False) -> Any: ...
@overload
def Path(alias: Optional[str] = None, *, default: T, required: bool = False) -> T: ...
@overload
def Cookie(alias: Optional[str] = None, *, required: bool = False) -> Any: ...
@overload
def Cookie(alias: Optional[str] = None, *, default: T, required: bool = False) -> T: ...
@overload
def Body() -> Any: ...
@overload
def Body(*, default: T) -> T: ...
@overload
def Body(*, default_factory: Callable[[], T]) -> T: ...
def Headers() -> Any: ...
def Queries() -> Any: ...
def Cookies() -> Any: ...
